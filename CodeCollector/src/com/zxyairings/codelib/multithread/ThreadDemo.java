package com.zxyairings.codelib.multithread;

/*

进程：是一个正在执行中的程序。
		每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制单元。

线程：就是进程中的一个独立的控制单元/执行路径。
		线程在控制着进程的执行，只有线程才能运行，进程是来分配空间，具体的运行由线程来控制。

一个进程中可以多执行路径，称之为多线程。

一个进程中至少有一个线程。

开启多个线程是为了同时运行多部分代码。

每一个线程都有自己运行的内容。这个内容可以称为线程要执行的任务。


多线程好处：解决了多部分同时运行的问题。
多线程的弊端：线程太多回到效率的降低。


其实应用程序的执行都是cpu在做着快速的切换完成的。这个切换是随机的。


JVM启动时就启动了多个线程，至少有两个线程可以分析的出来。

1，执行main函数的线程，
		该线程的任务代码都定义在main函数中。

2，负责垃圾回收的线程。

线程只有在获得cpu的执行权后才可以运行。


Java VM  启动的时候会有一个进程java.exe.

该进程中至少一个线程负责java程序的执行。
而且这个线程运行的代码存在于main方法中。
该线程称之为主线程。

扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程。

*/

class Demo extends Object
{
	//只有对象才知道怎么回收它自己
	//当垃圾回收器确定不存在对该对象的更多引用时，由垃圾回收器调用此方法。
	//一般不需要重写此方法，只有在涉及到系统资源，才会在finalize中关闭相应的系统资源
	public void finalize()
	{
		System.out.println("demo ok");
	}
}


class  ThreadDemo
{
	public static void main(String[] args) 
	{

		new Demo();
		new Demo();
		new Demo();
		System.gc();
		System.out.println("Hello World!");
	}
}
