网络三要素：
IP：对应到 server machine
逻辑端口：对应到 server 上的 application
通信规则：即协议。也就是通信中所用的是什么“语言”。


IP地址:InetAddress
	网络中设备的标识
	IP地址不易记忆，我们就给它起个名字，就是主机名
	本地回环地址：127.0.0.1 主机名：localhost

端口号
	用于标识进程的逻辑地址，不同进程的标识
	有效端口：0~65535，其中0~1024系统使用或保留端口。

传输协议
	通讯的规则
	常见协议：TCP，UDP


协议：
tcp/ip: 适用于广域网/局域网
IPX/SPX/NetBIOS: 局域网

如果在网络中使用不同的协议，那么在网络中找都找不到，因为没有通信的资格。

IP地址
子网掩码


端口号：0-65535 任选
但是，0-1024一般被系统保留，用也可以但是必须保证不冲突。

常见端口
web 服务：80
tomcat： 8080
mysql：3306

网络模型：
是分层的，上面的层都是基于下面的层，
发送数据时，是从源的应用层开始，向下压包，即数据每过一层，每一层都会将本层的信息包装数据，就形成了一层一层的数据包，最后到达物理层，并将此数据包发给目的地。
目的地收到此数据包后，开始向上解包，即数据包每过一层，每一层都会将数据包对应本层的包装层解析，最后到达应用程序，使用数据包中的源数据。


在网络模型中的不同的层，都有自己的通信规则即协议：
	传输层常见的协议是：TCP和UDP
	网络层的协议是：IP协议
	应用层的常见协议是：HTTP协议，FTP
java web开发是在应用层。
这节课主要关注在传输层和网络层。




UDP: 面向无连接
	生活中，相当于通过邮局来寄东西。
	将数据及源和目的封装成数据包中，不需要建立连接
	每个数据报的大小在限制在64k内
	因无连接，是不可靠协议
	不需要建立连接，速度快
	聊天工具，网络视频会议，桌面共享就是走UDP的，重要的是速度，而不是数据的完整性，丢一点数据就丢一点，你也看不出来

TCP：
	像生活中的打电话
	建立连接，形成传输数据的通道。
	在连接中进行大数据量传输
	通过三次握手完成连接，是可靠协议
	必须建立连接，效率会稍低
	
	
Socket：插座，插槽，插口，程序通过这些插槽建立连接进行通信。像码头。
	网络编程其实就是socket编程。
	可以讲socket理解为码头，两方需要通信，都必须现有码头。
	socket是 计算机中的一个网络应用程序
	Socket就是为网络服务提供的一种机制。
	通信的两端都有Socket。只有有了它，才会有连接，才有传输数据的通路。
	网络通信其实就是Socket间的通信。
	数据在两个Socket间通过IO传输。

玩socket最重要的是记住实现的流程：
第一步干嘛，第二步干嘛，。。。。
具体的代码可以查文档

有了socket，但是传输协议不同，每个不同的协议会有不同的建立socket的方式：
	1. UDP传输
		DatagramSocket与DatagramPacket
		建立发送端，接收端。
		建立数据包。
		调用Socket的发送接收方法。
		关闭Socket。
		发送端与接收端是两个独立的运行程序。
		发送端和接收端
	2. TCP传输
		Socket和ServerSocket
		建立客户端和服务器端
		建立连接后，通过Socket中的IO流进行数据的传输
		关闭socket
		同样，客户端与服务器端是两个独立的应用程序。
		客户端和服务端
		
		客户端基本思路：
			*客户端初始化时(构造方法中)需要明确服务器的ip地址以及端口，这说明客户端一初始化他就尝试连接服务端，这样才可以去试着连接服务端建立连接，如果连接失败，会出现异常，说明通信通路没有建立成功，从而就无法通信。
			*连接成功，说明客户端与服务端建立了通道，通路一建立就有了socket流-网络流-输出流/输入流。那么就可以通过IO流就可以进行数据的传输，而Socket对象已经提供了输入流和输出流对象，通过 getInputStream(),getOutputStream()获取即可。
			*与服务端通讯结束后，关闭Socket。 
		服务端基本思路：
			*服务端需要明确它要处理的数据是从哪个 端口进入的。
			*当有客户端访问时，要明确是哪个客户 端，可通过accept()获取已连接的客户端对象，并通过该对象与客户端通过IO流进行数据传输。
			*当该客户端访问结束，关闭该客户端。
			
1,tcp分客户端和服务端。
2，客户端对应的对象是Socket。
	服务端对应的对象是ServerSocket。

TCP客户端，
通过查阅socket对象，发现在该对象建立时，就可以去连接指定主机。
因为tcp是面向连接的。所以在建立socket服务时，
就要有服务端存在，并连接成功。形成通路后，在该通道进行数据的传输。

服务端:
1，建立服务端的socket服务。ServerSocket();
	并监听一个端口。
2，获取连接过来的客户端对象。
	通过ServerSokcet的 accept方法。没有连接就会等，所以这个方法阻塞式的。
3，客户端如果发过来数据，那么服务端要使用对应的客户端对象，并获取到该客户端对象的读取流来读取发过来的数据。
	并打印在控制台。

4，关闭服务端。（可选）

TCP传输最容易出现的问题:
	客户端连接上服务端，两端都在等待，没有任何数据传输。
	通过例程分析：
		因为read方法或者readLine方法是阻塞式。
	解决办法：
		自定义结束标记
		使用shutdownInput，shutdownOutput方法。

在IP地址中有两个IP地址比较特殊：
	192.168.1.0 ： 代表一个网络段
	192.168.1.255：代表这个网络段里德广播地址。比如当找一个主机找不到时，可以在这个网络段里所有机器发广播。


网络架构：

C/S:Client/Server
客户端，服务端。
特点：
1，需要在客户端和服务端都需要按照编写的软件。
2，维护较麻烦。
好处：可以减轻服务端的压力，如网络游戏。

B/S:Browser/Server
浏览器 ，服务端。
1，客户端不用单独编写软件。
	因为客户端用的就是浏览器。
2，对于软件升级，只要考虑服务端即可。

弊端：所有的程序都运行在服务端，客户端的浏览器毕竟解析能力较弱。对游戏等。
